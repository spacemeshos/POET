// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import empty "github.com/golang/protobuf/ptypes/empty"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SimpleMessage struct {
	Value                string   `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SimpleMessage) Reset()         { *m = SimpleMessage{} }
func (m *SimpleMessage) String() string { return proto.CompactTextString(m) }
func (*SimpleMessage) ProtoMessage()    {}
func (*SimpleMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_ef8a19b6535439bd, []int{0}
}
func (m *SimpleMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SimpleMessage.Unmarshal(m, b)
}
func (m *SimpleMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SimpleMessage.Marshal(b, m, deterministic)
}
func (dst *SimpleMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SimpleMessage.Merge(dst, src)
}
func (m *SimpleMessage) XXX_Size() int {
	return xxx_messageInfo_SimpleMessage.Size(m)
}
func (m *SimpleMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_SimpleMessage.DiscardUnknown(m)
}

var xxx_messageInfo_SimpleMessage proto.InternalMessageInfo

func (m *SimpleMessage) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type AccountId struct {
	Address              string   `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AccountId) Reset()         { *m = AccountId{} }
func (m *AccountId) String() string { return proto.CompactTextString(m) }
func (*AccountId) ProtoMessage()    {}
func (*AccountId) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_ef8a19b6535439bd, []int{1}
}
func (m *AccountId) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AccountId.Unmarshal(m, b)
}
func (m *AccountId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AccountId.Marshal(b, m, deterministic)
}
func (dst *AccountId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountId.Merge(dst, src)
}
func (m *AccountId) XXX_Size() int {
	return xxx_messageInfo_AccountId.Size(m)
}
func (m *AccountId) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountId.DiscardUnknown(m)
}

var xxx_messageInfo_AccountId proto.InternalMessageInfo

func (m *AccountId) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type TransferFunds struct {
	Sender               *AccountId `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	Receiver             *AccountId `protobuf:"bytes,2,opt,name=receiver,proto3" json:"receiver,omitempty"`
	Nonce                uint64     `protobuf:"varint,3,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Amount               uint64     `protobuf:"varint,4,opt,name=amount,proto3" json:"amount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *TransferFunds) Reset()         { *m = TransferFunds{} }
func (m *TransferFunds) String() string { return proto.CompactTextString(m) }
func (*TransferFunds) ProtoMessage()    {}
func (*TransferFunds) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_ef8a19b6535439bd, []int{2}
}
func (m *TransferFunds) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TransferFunds.Unmarshal(m, b)
}
func (m *TransferFunds) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TransferFunds.Marshal(b, m, deterministic)
}
func (dst *TransferFunds) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransferFunds.Merge(dst, src)
}
func (m *TransferFunds) XXX_Size() int {
	return xxx_messageInfo_TransferFunds.Size(m)
}
func (m *TransferFunds) XXX_DiscardUnknown() {
	xxx_messageInfo_TransferFunds.DiscardUnknown(m)
}

var xxx_messageInfo_TransferFunds proto.InternalMessageInfo

func (m *TransferFunds) GetSender() *AccountId {
	if m != nil {
		return m.Sender
	}
	return nil
}

func (m *TransferFunds) GetReceiver() *AccountId {
	if m != nil {
		return m.Receiver
	}
	return nil
}

func (m *TransferFunds) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *TransferFunds) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

type SignedTransaction struct {
	SrcAddress           string   `protobuf:"bytes,1,opt,name=srcAddress,proto3" json:"srcAddress,omitempty"`
	DstAddress           string   `protobuf:"bytes,2,opt,name=dstAddress,proto3" json:"dstAddress,omitempty"`
	Amount               string   `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`
	Nonce                string   `protobuf:"bytes,4,opt,name=nonce,proto3" json:"nonce,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SignedTransaction) Reset()         { *m = SignedTransaction{} }
func (m *SignedTransaction) String() string { return proto.CompactTextString(m) }
func (*SignedTransaction) ProtoMessage()    {}
func (*SignedTransaction) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_ef8a19b6535439bd, []int{3}
}
func (m *SignedTransaction) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SignedTransaction.Unmarshal(m, b)
}
func (m *SignedTransaction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SignedTransaction.Marshal(b, m, deterministic)
}
func (dst *SignedTransaction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignedTransaction.Merge(dst, src)
}
func (m *SignedTransaction) XXX_Size() int {
	return xxx_messageInfo_SignedTransaction.Size(m)
}
func (m *SignedTransaction) XXX_DiscardUnknown() {
	xxx_messageInfo_SignedTransaction.DiscardUnknown(m)
}

var xxx_messageInfo_SignedTransaction proto.InternalMessageInfo

func (m *SignedTransaction) GetSrcAddress() string {
	if m != nil {
		return m.SrcAddress
	}
	return ""
}

func (m *SignedTransaction) GetDstAddress() string {
	if m != nil {
		return m.DstAddress
	}
	return ""
}

func (m *SignedTransaction) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

func (m *SignedTransaction) GetNonce() string {
	if m != nil {
		return m.Nonce
	}
	return ""
}

type BroadcastMessage struct {
	Data                 string   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BroadcastMessage) Reset()         { *m = BroadcastMessage{} }
func (m *BroadcastMessage) String() string { return proto.CompactTextString(m) }
func (*BroadcastMessage) ProtoMessage()    {}
func (*BroadcastMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_ef8a19b6535439bd, []int{4}
}
func (m *BroadcastMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BroadcastMessage.Unmarshal(m, b)
}
func (m *BroadcastMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BroadcastMessage.Marshal(b, m, deterministic)
}
func (dst *BroadcastMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BroadcastMessage.Merge(dst, src)
}
func (m *BroadcastMessage) XXX_Size() int {
	return xxx_messageInfo_BroadcastMessage.Size(m)
}
func (m *BroadcastMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_BroadcastMessage.DiscardUnknown(m)
}

var xxx_messageInfo_BroadcastMessage proto.InternalMessageInfo

func (m *BroadcastMessage) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

type BinaryMessage struct {
	Data                 []byte   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BinaryMessage) Reset()         { *m = BinaryMessage{} }
func (m *BinaryMessage) String() string { return proto.CompactTextString(m) }
func (*BinaryMessage) ProtoMessage()    {}
func (*BinaryMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_ef8a19b6535439bd, []int{5}
}
func (m *BinaryMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BinaryMessage.Unmarshal(m, b)
}
func (m *BinaryMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BinaryMessage.Marshal(b, m, deterministic)
}
func (dst *BinaryMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BinaryMessage.Merge(dst, src)
}
func (m *BinaryMessage) XXX_Size() int {
	return xxx_messageInfo_BinaryMessage.Size(m)
}
func (m *BinaryMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_BinaryMessage.DiscardUnknown(m)
}

var xxx_messageInfo_BinaryMessage proto.InternalMessageInfo

func (m *BinaryMessage) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type CommitmentSizeMessage struct {
	MbCommitted          uint64   `protobuf:"varint,1,opt,name=mbCommitted,proto3" json:"mbCommitted,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CommitmentSizeMessage) Reset()         { *m = CommitmentSizeMessage{} }
func (m *CommitmentSizeMessage) String() string { return proto.CompactTextString(m) }
func (*CommitmentSizeMessage) ProtoMessage()    {}
func (*CommitmentSizeMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_ef8a19b6535439bd, []int{6}
}
func (m *CommitmentSizeMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommitmentSizeMessage.Unmarshal(m, b)
}
func (m *CommitmentSizeMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommitmentSizeMessage.Marshal(b, m, deterministic)
}
func (dst *CommitmentSizeMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommitmentSizeMessage.Merge(dst, src)
}
func (m *CommitmentSizeMessage) XXX_Size() int {
	return xxx_messageInfo_CommitmentSizeMessage.Size(m)
}
func (m *CommitmentSizeMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_CommitmentSizeMessage.DiscardUnknown(m)
}

var xxx_messageInfo_CommitmentSizeMessage proto.InternalMessageInfo

func (m *CommitmentSizeMessage) GetMbCommitted() uint64 {
	if m != nil {
		return m.MbCommitted
	}
	return 0
}

type LogicalDriveMessage struct {
	LogicalDrive         string   `protobuf:"bytes,1,opt,name=logicalDrive,proto3" json:"logicalDrive,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LogicalDriveMessage) Reset()         { *m = LogicalDriveMessage{} }
func (m *LogicalDriveMessage) String() string { return proto.CompactTextString(m) }
func (*LogicalDriveMessage) ProtoMessage()    {}
func (*LogicalDriveMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_ef8a19b6535439bd, []int{7}
}
func (m *LogicalDriveMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogicalDriveMessage.Unmarshal(m, b)
}
func (m *LogicalDriveMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogicalDriveMessage.Marshal(b, m, deterministic)
}
func (dst *LogicalDriveMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogicalDriveMessage.Merge(dst, src)
}
func (m *LogicalDriveMessage) XXX_Size() int {
	return xxx_messageInfo_LogicalDriveMessage.Size(m)
}
func (m *LogicalDriveMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_LogicalDriveMessage.DiscardUnknown(m)
}

var xxx_messageInfo_LogicalDriveMessage proto.InternalMessageInfo

func (m *LogicalDriveMessage) GetLogicalDrive() string {
	if m != nil {
		return m.LogicalDrive
	}
	return ""
}

func init() {
	proto.RegisterType((*SimpleMessage)(nil), "pb.SimpleMessage")
	proto.RegisterType((*AccountId)(nil), "pb.AccountId")
	proto.RegisterType((*TransferFunds)(nil), "pb.TransferFunds")
	proto.RegisterType((*SignedTransaction)(nil), "pb.SignedTransaction")
	proto.RegisterType((*BroadcastMessage)(nil), "pb.BroadcastMessage")
	proto.RegisterType((*BinaryMessage)(nil), "pb.BinaryMessage")
	proto.RegisterType((*CommitmentSizeMessage)(nil), "pb.CommitmentSizeMessage")
	proto.RegisterType((*LogicalDriveMessage)(nil), "pb.LogicalDriveMessage")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SpacemeshServiceClient is the client API for SpacemeshService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SpacemeshServiceClient interface {
	Echo(ctx context.Context, in *SimpleMessage, opts ...grpc.CallOption) (*SimpleMessage, error)
	GetNonce(ctx context.Context, in *AccountId, opts ...grpc.CallOption) (*SimpleMessage, error)
	GetBalance(ctx context.Context, in *AccountId, opts ...grpc.CallOption) (*SimpleMessage, error)
	SubmitTransaction(ctx context.Context, in *SignedTransaction, opts ...grpc.CallOption) (*SimpleMessage, error)
	Broadcast(ctx context.Context, in *BroadcastMessage, opts ...grpc.CallOption) (*SimpleMessage, error)
	BroadcastPoet(ctx context.Context, in *BinaryMessage, opts ...grpc.CallOption) (*SimpleMessage, error)
	SetCommitmentSize(ctx context.Context, in *CommitmentSizeMessage, opts ...grpc.CallOption) (*SimpleMessage, error)
	SetLogicalDrive(ctx context.Context, in *LogicalDriveMessage, opts ...grpc.CallOption) (*SimpleMessage, error)
	SetAwardsAddress(ctx context.Context, in *AccountId, opts ...grpc.CallOption) (*SimpleMessage, error)
	GetInitProgress(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*SimpleMessage, error)
	GetTotalAwards(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*SimpleMessage, error)
	GetUpcomingAwards(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*SimpleMessage, error)
}

type spacemeshServiceClient struct {
	cc *grpc.ClientConn
}

func NewSpacemeshServiceClient(cc *grpc.ClientConn) SpacemeshServiceClient {
	return &spacemeshServiceClient{cc}
}

func (c *spacemeshServiceClient) Echo(ctx context.Context, in *SimpleMessage, opts ...grpc.CallOption) (*SimpleMessage, error) {
	out := new(SimpleMessage)
	err := c.cc.Invoke(ctx, "/pb.SpacemeshService/Echo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spacemeshServiceClient) GetNonce(ctx context.Context, in *AccountId, opts ...grpc.CallOption) (*SimpleMessage, error) {
	out := new(SimpleMessage)
	err := c.cc.Invoke(ctx, "/pb.SpacemeshService/GetNonce", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spacemeshServiceClient) GetBalance(ctx context.Context, in *AccountId, opts ...grpc.CallOption) (*SimpleMessage, error) {
	out := new(SimpleMessage)
	err := c.cc.Invoke(ctx, "/pb.SpacemeshService/GetBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spacemeshServiceClient) SubmitTransaction(ctx context.Context, in *SignedTransaction, opts ...grpc.CallOption) (*SimpleMessage, error) {
	out := new(SimpleMessage)
	err := c.cc.Invoke(ctx, "/pb.SpacemeshService/SubmitTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spacemeshServiceClient) Broadcast(ctx context.Context, in *BroadcastMessage, opts ...grpc.CallOption) (*SimpleMessage, error) {
	out := new(SimpleMessage)
	err := c.cc.Invoke(ctx, "/pb.SpacemeshService/Broadcast", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spacemeshServiceClient) BroadcastPoet(ctx context.Context, in *BinaryMessage, opts ...grpc.CallOption) (*SimpleMessage, error) {
	out := new(SimpleMessage)
	err := c.cc.Invoke(ctx, "/pb.SpacemeshService/BroadcastPoet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spacemeshServiceClient) SetCommitmentSize(ctx context.Context, in *CommitmentSizeMessage, opts ...grpc.CallOption) (*SimpleMessage, error) {
	out := new(SimpleMessage)
	err := c.cc.Invoke(ctx, "/pb.SpacemeshService/SetCommitmentSize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spacemeshServiceClient) SetLogicalDrive(ctx context.Context, in *LogicalDriveMessage, opts ...grpc.CallOption) (*SimpleMessage, error) {
	out := new(SimpleMessage)
	err := c.cc.Invoke(ctx, "/pb.SpacemeshService/SetLogicalDrive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spacemeshServiceClient) SetAwardsAddress(ctx context.Context, in *AccountId, opts ...grpc.CallOption) (*SimpleMessage, error) {
	out := new(SimpleMessage)
	err := c.cc.Invoke(ctx, "/pb.SpacemeshService/SetAwardsAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spacemeshServiceClient) GetInitProgress(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*SimpleMessage, error) {
	out := new(SimpleMessage)
	err := c.cc.Invoke(ctx, "/pb.SpacemeshService/GetInitProgress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spacemeshServiceClient) GetTotalAwards(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*SimpleMessage, error) {
	out := new(SimpleMessage)
	err := c.cc.Invoke(ctx, "/pb.SpacemeshService/GetTotalAwards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spacemeshServiceClient) GetUpcomingAwards(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*SimpleMessage, error) {
	out := new(SimpleMessage)
	err := c.cc.Invoke(ctx, "/pb.SpacemeshService/GetUpcomingAwards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SpacemeshServiceServer is the server API for SpacemeshService service.
type SpacemeshServiceServer interface {
	Echo(context.Context, *SimpleMessage) (*SimpleMessage, error)
	GetNonce(context.Context, *AccountId) (*SimpleMessage, error)
	GetBalance(context.Context, *AccountId) (*SimpleMessage, error)
	SubmitTransaction(context.Context, *SignedTransaction) (*SimpleMessage, error)
	Broadcast(context.Context, *BroadcastMessage) (*SimpleMessage, error)
	BroadcastPoet(context.Context, *BinaryMessage) (*SimpleMessage, error)
	SetCommitmentSize(context.Context, *CommitmentSizeMessage) (*SimpleMessage, error)
	SetLogicalDrive(context.Context, *LogicalDriveMessage) (*SimpleMessage, error)
	SetAwardsAddress(context.Context, *AccountId) (*SimpleMessage, error)
	GetInitProgress(context.Context, *empty.Empty) (*SimpleMessage, error)
	GetTotalAwards(context.Context, *empty.Empty) (*SimpleMessage, error)
	GetUpcomingAwards(context.Context, *empty.Empty) (*SimpleMessage, error)
}

func RegisterSpacemeshServiceServer(s *grpc.Server, srv SpacemeshServiceServer) {
	s.RegisterService(&_SpacemeshService_serviceDesc, srv)
}

func _SpacemeshService_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimpleMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpacemeshServiceServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SpacemeshService/Echo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpacemeshServiceServer).Echo(ctx, req.(*SimpleMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpacemeshService_GetNonce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpacemeshServiceServer).GetNonce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SpacemeshService/GetNonce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpacemeshServiceServer).GetNonce(ctx, req.(*AccountId))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpacemeshService_GetBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpacemeshServiceServer).GetBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SpacemeshService/GetBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpacemeshServiceServer).GetBalance(ctx, req.(*AccountId))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpacemeshService_SubmitTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignedTransaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpacemeshServiceServer).SubmitTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SpacemeshService/SubmitTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpacemeshServiceServer).SubmitTransaction(ctx, req.(*SignedTransaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpacemeshService_Broadcast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BroadcastMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpacemeshServiceServer).Broadcast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SpacemeshService/Broadcast",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpacemeshServiceServer).Broadcast(ctx, req.(*BroadcastMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpacemeshService_BroadcastPoet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BinaryMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpacemeshServiceServer).BroadcastPoet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SpacemeshService/BroadcastPoet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpacemeshServiceServer).BroadcastPoet(ctx, req.(*BinaryMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpacemeshService_SetCommitmentSize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitmentSizeMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpacemeshServiceServer).SetCommitmentSize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SpacemeshService/SetCommitmentSize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpacemeshServiceServer).SetCommitmentSize(ctx, req.(*CommitmentSizeMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpacemeshService_SetLogicalDrive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogicalDriveMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpacemeshServiceServer).SetLogicalDrive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SpacemeshService/SetLogicalDrive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpacemeshServiceServer).SetLogicalDrive(ctx, req.(*LogicalDriveMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpacemeshService_SetAwardsAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpacemeshServiceServer).SetAwardsAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SpacemeshService/SetAwardsAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpacemeshServiceServer).SetAwardsAddress(ctx, req.(*AccountId))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpacemeshService_GetInitProgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpacemeshServiceServer).GetInitProgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SpacemeshService/GetInitProgress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpacemeshServiceServer).GetInitProgress(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpacemeshService_GetTotalAwards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpacemeshServiceServer).GetTotalAwards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SpacemeshService/GetTotalAwards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpacemeshServiceServer).GetTotalAwards(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpacemeshService_GetUpcomingAwards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpacemeshServiceServer).GetUpcomingAwards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SpacemeshService/GetUpcomingAwards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpacemeshServiceServer).GetUpcomingAwards(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _SpacemeshService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.SpacemeshService",
	HandlerType: (*SpacemeshServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Echo",
			Handler:    _SpacemeshService_Echo_Handler,
		},
		{
			MethodName: "GetNonce",
			Handler:    _SpacemeshService_GetNonce_Handler,
		},
		{
			MethodName: "GetBalance",
			Handler:    _SpacemeshService_GetBalance_Handler,
		},
		{
			MethodName: "SubmitTransaction",
			Handler:    _SpacemeshService_SubmitTransaction_Handler,
		},
		{
			MethodName: "Broadcast",
			Handler:    _SpacemeshService_Broadcast_Handler,
		},
		{
			MethodName: "BroadcastPoet",
			Handler:    _SpacemeshService_BroadcastPoet_Handler,
		},
		{
			MethodName: "SetCommitmentSize",
			Handler:    _SpacemeshService_SetCommitmentSize_Handler,
		},
		{
			MethodName: "SetLogicalDrive",
			Handler:    _SpacemeshService_SetLogicalDrive_Handler,
		},
		{
			MethodName: "SetAwardsAddress",
			Handler:    _SpacemeshService_SetAwardsAddress_Handler,
		},
		{
			MethodName: "GetInitProgress",
			Handler:    _SpacemeshService_GetInitProgress_Handler,
		},
		{
			MethodName: "GetTotalAwards",
			Handler:    _SpacemeshService_GetTotalAwards_Handler,
		},
		{
			MethodName: "GetUpcomingAwards",
			Handler:    _SpacemeshService_GetUpcomingAwards_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

func init() { proto.RegisterFile("api.proto", fileDescriptor_api_ef8a19b6535439bd) }

var fileDescriptor_api_ef8a19b6535439bd = []byte{
	// 721 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x94, 0xdf, 0x4e, 0x13, 0x4f,
	0x14, 0xc7, 0xd3, 0xd2, 0x1f, 0x3f, 0x7a, 0xa0, 0xd0, 0x0e, 0x2d, 0xd4, 0x82, 0xa4, 0x19, 0x83,
	0x41, 0x2f, 0xda, 0x88, 0x57, 0x78, 0x47, 0x15, 0x1a, 0x12, 0x25, 0xa4, 0x8b, 0x89, 0x31, 0x31,
	0x3a, 0x9d, 0x3d, 0x2c, 0x93, 0xec, 0xee, 0x6c, 0x76, 0xa6, 0x55, 0xb8, 0xd3, 0x17, 0xf0, 0xc2,
	0x07, 0xf0, 0xa1, 0x7c, 0x05, 0x1f, 0xc4, 0xcc, 0xec, 0x76, 0xe9, 0xe2, 0x26, 0xc8, 0x5d, 0xcf,
	0xbf, 0xcf, 0x39, 0x3d, 0xe7, 0xbb, 0x03, 0x55, 0x16, 0x89, 0x5e, 0x14, 0x4b, 0x2d, 0x49, 0x39,
	0x1a, 0x77, 0xb6, 0x3d, 0x29, 0x3d, 0x1f, 0xfb, 0x2c, 0x12, 0x7d, 0x16, 0x86, 0x52, 0x33, 0x2d,
	0x64, 0xa8, 0x92, 0x8c, 0xce, 0x56, 0x1a, 0xb5, 0xd6, 0x78, 0x72, 0xd1, 0xc7, 0x20, 0xd2, 0x57,
	0x49, 0x90, 0xee, 0x42, 0xcd, 0x11, 0x41, 0xe4, 0xe3, 0x1b, 0x54, 0x8a, 0x79, 0x48, 0x9a, 0xf0,
	0xdf, 0x94, 0xf9, 0x13, 0x6c, 0x97, 0xba, 0xa5, 0xbd, 0xea, 0x28, 0x31, 0xe8, 0x2e, 0x54, 0x0f,
	0x39, 0x97, 0x93, 0x50, 0x9f, 0xb8, 0xa4, 0x0d, 0xff, 0x33, 0xd7, 0x8d, 0x51, 0xa9, 0x34, 0x69,
	0x66, 0xd2, 0xef, 0x25, 0xa8, 0x9d, 0xc7, 0x2c, 0x54, 0x17, 0x18, 0x1f, 0x4f, 0x42, 0x57, 0x91,
	0x5d, 0x58, 0x54, 0x18, 0xba, 0x18, 0xdb, 0xd4, 0xe5, 0xfd, 0x5a, 0x2f, 0x1a, 0xf7, 0x32, 0xd4,
	0x28, 0x0d, 0x92, 0x27, 0xb0, 0x14, 0x23, 0x47, 0x31, 0xc5, 0xb8, 0x5d, 0x2e, 0x4a, 0xcc, 0xc2,
	0x66, 0xc0, 0x50, 0x86, 0x1c, 0xdb, 0x0b, 0xdd, 0xd2, 0x5e, 0x65, 0x94, 0x18, 0x64, 0x03, 0x16,
	0x59, 0x60, 0x72, 0xdb, 0x15, 0xeb, 0x4e, 0x2d, 0xfa, 0xb5, 0x04, 0x0d, 0x47, 0x78, 0x21, 0xba,
	0x76, 0x2e, 0xc6, 0xcd, 0x66, 0xc8, 0x0e, 0x80, 0x8a, 0xf9, 0x61, 0xee, 0x4f, 0xcc, 0x79, 0x4c,
	0xdc, 0x55, 0x7a, 0x16, 0x2f, 0x27, 0xf1, 0x1b, 0xcf, 0x5c, 0xb7, 0x05, 0x1b, 0x4b, 0xad, 0x9b,
	0xd9, 0x2a, 0xc9, 0xf2, 0xac, 0x41, 0x1f, 0x43, 0x7d, 0x10, 0x4b, 0xe6, 0x72, 0xa6, 0xf4, 0x6c,
	0xcd, 0x04, 0x2a, 0x2e, 0xd3, 0x2c, 0xed, 0x6d, 0x7f, 0xd3, 0x47, 0x50, 0x1b, 0x88, 0x90, 0xc5,
	0x57, 0x45, 0x49, 0x2b, 0x69, 0xd2, 0x01, 0xb4, 0x5e, 0xca, 0x20, 0x10, 0x3a, 0xc0, 0x50, 0x3b,
	0xe2, 0x3a, 0x3b, 0x5c, 0x17, 0x96, 0x83, 0x71, 0x12, 0xd2, 0xe8, 0xda, 0x9a, 0xca, 0x68, 0xde,
	0x45, 0x0f, 0x60, 0xfd, 0xb5, 0xf4, 0x04, 0x67, 0xfe, 0xab, 0x58, 0x4c, 0xb3, 0x42, 0x0a, 0x2b,
	0xfe, 0x9c, 0x3b, 0x1d, 0x29, 0xe7, 0xdb, 0xff, 0xb9, 0x04, 0x75, 0x27, 0x62, 0x1c, 0x03, 0x54,
	0x97, 0x0e, 0xc6, 0x53, 0xc1, 0x91, 0x9c, 0x40, 0xe5, 0x88, 0x5f, 0x4a, 0xd2, 0x30, 0xa7, 0xca,
	0xa9, 0xa8, 0xf3, 0xb7, 0x8b, 0x6e, 0x7d, 0xfb, 0xf5, 0xfb, 0x47, 0xb9, 0x45, 0xeb, 0xfd, 0xe9,
	0xb3, 0x3e, 0x7e, 0x61, 0x26, 0xd6, 0x47, 0x7e, 0x29, 0x5f, 0x94, 0x9e, 0x92, 0x01, 0x2c, 0x0d,
	0x51, 0x9f, 0xda, 0x53, 0xe6, 0x2f, 0x5f, 0x84, 0x6a, 0x5a, 0xd4, 0x2a, 0xad, 0x1a, 0x94, 0xdd,
	0xb1, 0x61, 0x1c, 0x03, 0x0c, 0x51, 0x0f, 0x98, 0xcf, 0xfe, 0x8d, 0xb2, 0x61, 0x29, 0x75, 0xba,
	0x6c, 0x28, 0xe3, 0xa4, 0xcc, 0x70, 0x3e, 0x42, 0xc3, 0x99, 0x8c, 0x03, 0xa1, 0xe7, 0x15, 0xd3,
	0x4a, 0xea, 0x6f, 0x09, 0xa9, 0x08, 0xdb, 0xb5, 0xd8, 0x0e, 0x6d, 0x19, 0xac, 0xb2, 0x20, 0x7d,
	0x53, 0x61, 0x1a, 0x9c, 0x42, 0x35, 0xd3, 0x03, 0x69, 0x1a, 0xc2, 0x6d, 0x79, 0x14, 0x71, 0xdb,
	0x96, 0x4b, 0x68, 0xcd, 0x8e, 0x3b, 0x2b, 0x30, 0x3c, 0x07, 0x6a, 0x19, 0xe0, 0x4c, 0xa2, 0x4e,
	0x0e, 0x92, 0x93, 0x52, 0x11, 0x70, 0xdb, 0x02, 0x37, 0x68, 0x23, 0x07, 0x8c, 0x24, 0x5a, 0x28,
	0x87, 0x86, 0x83, 0x3a, 0x2f, 0x35, 0xf2, 0xc0, 0x50, 0x0a, 0xe5, 0x77, 0xf7, 0x26, 0x50, 0xf3,
	0xac, 0x50, 0x89, 0x6b, 0xbb, 0xea, 0x0f, 0xb0, 0xe6, 0xa0, 0x9e, 0x17, 0x25, 0xd9, 0x34, 0x9c,
	0x02, 0x99, 0x16, 0x35, 0xd8, 0xb1, 0x0d, 0xda, 0x74, 0x3d, 0x6d, 0x90, 0x4a, 0xd6, 0x35, 0x65,
	0x06, 0x3f, 0x82, 0xba, 0x83, 0xfa, 0xf0, 0x33, 0x8b, 0x5d, 0x35, 0xfb, 0x74, 0xef, 0xd6, 0x45,
	0x6e, 0x2f, 0x0a, 0x35, 0xb3, 0xf5, 0xe6, 0x89, 0x33, 0xcc, 0x77, 0xb0, 0x36, 0x44, 0x7d, 0x12,
	0x0a, 0x7d, 0x16, 0x4b, 0x2f, 0x79, 0x0d, 0x7a, 0xc9, 0x0b, 0xdb, 0x9b, 0xbd, 0xb0, 0xbd, 0x23,
	0xf3, 0xc2, 0x16, 0xb1, 0x3b, 0x96, 0xdd, 0xa4, 0x6b, 0x86, 0xed, 0xa1, 0x8e, 0x52, 0x86, 0x21,
	0xbf, 0x87, 0xd5, 0x21, 0xea, 0x73, 0xa9, 0x99, 0x9f, 0x8c, 0x7c, 0x1f, 0xf0, 0x43, 0x0b, 0xde,
	0xa4, 0x24, 0x05, 0x6b, 0x83, 0x49, 0x26, 0x37, 0xec, 0x4f, 0xd0, 0x18, 0xa2, 0x7e, 0x1b, 0x71,
	0x19, 0x88, 0xd0, 0xbb, 0x3f, 0x3e, 0x77, 0x4a, 0x0f, 0xf5, 0x24, 0x25, 0x65, 0x1d, 0xc6, 0x8b,
	0x16, 0xf2, 0xfc, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xbf, 0x81, 0xe1, 0xb4, 0x9b, 0x06, 0x00,
	0x00,
}
