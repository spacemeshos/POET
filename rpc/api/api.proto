syntax = "proto3";

import "google/api/annotations.proto";

package api;

service Poet {
    rpc Submit (SubmitRequest) returns (SubmitResponse) {
        option (google.api.http) = {
            post: "/v1/submit",
            body: "*",
        };
    }

    rpc GetMembershipProof (GetMembershipProofRequest) returns (GetMembershipProofResponse) {
        option (google.api.http) = {
            get: "/v1/mproof/{roundId}/{commitment}"
        };
    }

    rpc GetProof (GetProofRequest) returns (GetProofResponse) {
        option (google.api.http) = {
            get: "/v1/proof/{roundId}"
        };
    }

    rpc GetRoundInfo (GetRoundInfoRequest) returns (GetRoundInfoResponse) {
        option (google.api.http) = {
            get: "/v1/roundinfo/{roundId}"
        };
    }

    rpc GetInfo (GetInfoRequest) returns (GetInfoResponse) {
        option (google.api.http) = {
            get: "/v1/info"
        };
    }
}

message SubmitRequest {
    bytes challenge = 1;
}

message SubmitResponse {
    int32 roundId = 1;
}

message GetMembershipProofRequest {
    int32 roundId = 1;
    bytes commitment = 2;
    bool wait = 3;
}

message GetMembershipProofResponse {
    MembershipProof mproof = 1;
}

message GetProofRequest {
    int32 roundId = 1;
    bool wait = 2;
}

message GetProofResponse {
    Proof proof = 1;
}

message GetInfoRequest {
}

message GetRoundInfoResponse {
    int64 opened = 1;
    int64 executeStart = 2;
    int64 executeEnd = 3;
    int32 numOfcommitments = 4;
    bytes merkleRoot = 5;
    Proof proof = 6;
}

message GetRoundInfoRequest {
    int32 roundId = 1;
}

message GetInfoResponse {
    int32 openRoundId = 1;
    repeated int32 executingRoundsIds = 2;
    repeated int32 executedRoundsIds = 3;
}

message MembershipProof {
    int32 index = 1;
    bytes root = 2;
    repeated bytes proof = 3;
}

message Proof {
    bytes phi = 1;
    repeated Labels l = 2;
}

message Labels {
    repeated bytes labels = 1;
}
